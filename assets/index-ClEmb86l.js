(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const i of document.querySelectorAll('link[rel="modulepreload"]'))n(i);new MutationObserver(i=>{for(const r of i)if(r.type==="childList")for(const a of r.addedNodes)a.tagName==="LINK"&&a.rel==="modulepreload"&&n(a)}).observe(document,{childList:!0,subtree:!0});function o(i){const r={};return i.integrity&&(r.integrity=i.integrity),i.referrerPolicy&&(r.referrerPolicy=i.referrerPolicy),i.crossOrigin==="use-credentials"?r.credentials="include":i.crossOrigin==="anonymous"?r.credentials="omit":r.credentials="same-origin",r}function n(i){if(i.ep)return;i.ep=!0;const r=o(i);fetch(i.href,r)}})();function x(e,t){return e.kind==="single"?e.food===t:e.options.includes(t)}function A(e,t){const o=Array.isArray(t)?t:[t],n=e.faces.length,i=e.faces.filter(r=>o.some(a=>x(r,a)));return i.length===0?0:i.length/n}function L(e){const t=new Set;for(const o of e.faces)if(o.kind==="single")t.add(o.food);else for(const n of o.options)t.add(n);return Array.from(t)}const y={containsFood:x,getFoodOdds:A,getAllUniqueFoodsOnDie:L};function k(e,t,o){if(o===1)throw new Error("Recursive reroll with only 1 die, aborting");const n=new Set(Array.isArray(t)?t:[t]),i=e.faces.length,r=e.faces.filter(a=>a.kind==="single"?!n.has(a.food):!n.has(a.options[0])&&!n.has(a.options[1])).length;return r===0?0:r/Math.pow(i,o)}function O(e,t,o,n){const i=k(e,t,o);return n.anySuccess=n.anySuccess/(1-i),n.expectedValue=n.anySuccess,n.failure=1-n.anySuccess,n.distribution={0:n.failure,1:n.anySuccess},n}function S(e,t,o,n,i=!1){const r=y.getFoodOdds(t,o),a=Math.pow(1-r,n),s=1-a,l={activationName:e,distribution:{0:a,1:s},anySuccess:s,failure:a,expectedValue:s};return i?O(t,o,n,l):l}function T(e,t){if(t<0||t>e)return 0;if(t===0||t===e)return 1;let o=1;for(let n=1;n<=t;n++)o*=(e-n+1)/n;return o}function I(e,t,o,n){const r=1/(1-k(e,t,o));let a=Object.fromEntries(Object.entries(n.distribution).map(([d,m])=>[Number(d),m*r]));const s=n.expectedValue*r,l=n.anySuccess*r,f=1-l;return a[0]=f,{activationName:n.activationName,distribution:a,anySuccess:l,failure:f,expectedValue:s}}function M(e,t,o,n,i=!1){const r=y.getFoodOdds(t,o),a={};let s=0;for(let c=0;c<=n;c++){const m=T(n,c)*Math.pow(r,c)*Math.pow(1-r,n-c);a[c]=m,s+=c*m}const l=a[0],f={activationName:e,distribution:a,anySuccess:1-l,failure:l,expectedValue:s};return i?I(t,o,n,f):f}function P(e,t,o,n,i){const r=y.getFoodOdds(t,o),a=1-Math.pow(1-r,n),s=Math.pow(a,i),l=1-s,f=i*s,c={0:l,[i]:s};return{activationName:e,distribution:c,anySuccess:s,failure:l,expectedValue:f}}function $(e){const t=[],o=1<<e.length;for(let n=1;n<o;n++){const i=[];for(let r=0;r<e.length;r++)n&1<<r&&i.push(e[r]);t.push(i)}return t}function j(e,t,o){const n=y.getAllUniqueFoodsOnDie(t);let i={};for(const d of n){const m=y.getFoodOdds(t,d);i[d]=1-Math.pow(1-m,o)}let r={};const a=$(n);for(const d of a){const m=new Set(d),p=n.filter(B=>!m.has(B));let N=1;for(const B of m)N*=i[B];for(const B of p)N*=1-i[B];const E=d.length;r[E]=(r[E]??0)+N}const s=Object.values(r).reduce((d,m)=>d+m,0),l={};for(const d in r)l[+d]=r[+d]/s;let f=0,c=0;for(const[d,m]of Object.entries(l)){const p=+d;f+=p*m,c+=m}return{activationName:e,distribution:l,anySuccess:c,failure:1-c,expectedValue:f}}function H(e,t,o,n,i){const r=y.getFoodOdds(t,o),a=1-Math.pow(1-r,i);let s=0;for(let d=3;d<=n;d++){const m=T(n,d)*Math.pow(a,d)*Math.pow(1-a,n-d);s+=m}const l=1-s;return{activationName:e,distribution:{0:l,1:s},anySuccess:s,failure:l,expectedValue:s}}const C={version:"basegame",faces:[{kind:"single",food:"Invertebrate"},{kind:"single",food:"Seed"},{kind:"single",food:"Fish"},{kind:"single",food:"Fruit"},{kind:"single",food:"Rodent"},{kind:"choice",options:["Invertebrate","Seed"]}]},W={version:"oceania",faces:[{kind:"single",food:"Invertebrate"},{kind:"choice",options:["Seed","Nectar"]},{kind:"single",food:"Fish"},{kind:"choice",options:["Fruit","Nectar"]},{kind:"single",food:"Rodent"},{kind:"choice",options:["Invertebrate","Seed"]}]},G={basegame:C,oceania:W},V=[{birdName:"American Kestrel",targetFood:"Rodent",dieCount:4,rollCount:1,activationResultMode:"binary"},{birdName:"Anhinga",targetFood:"Fish",dieCount:4,rollCount:1,activationResultMode:"binary"},{birdName:"Barn Owl",targetFood:"Rodent",dieCount:4,rollCount:1,activationResultMode:"binary"},{birdName:"Black Skimmer",targetFood:"Fish",dieCount:4,rollCount:1,activationResultMode:"binary"},{birdName:"Broad-Winged Hawk",targetFood:"Rodent",dieCount:4,rollCount:1,activationResultMode:"binary"},{birdName:"Burrowing Owl",targetFood:"Rodent",dieCount:4,rollCount:1,activationResultMode:"binary"},{birdName:"Common Merganser",targetFood:"Rodent",dieCount:4,rollCount:1,activationResultMode:"binary"},{birdName:"Eastern Screech Owl",targetFood:"Rodent",dieCount:4,rollCount:1,activationResultMode:"binary"},{birdName:"Eleonora's Falcon",targetFood:"Rodent",dieCount:4,rollCount:1,activationResultMode:"binary"},{birdName:"Ferruginous Hawk",targetFood:"Rodent",dieCount:4,rollCount:1,activationResultMode:"binary"},{birdName:"Mississippi Kite",targetFood:"Rodent",dieCount:4,rollCount:1,activationResultMode:"binary"},{birdName:"Northern Gannet",targetFood:"Fish",dieCount:4,rollCount:1,activationResultMode:"binomial"},{birdName:"Snowy Egret",targetFood:"Fish",dieCount:4,rollCount:1,activationResultMode:"binary"},{birdName:"White-Faced Ibis",targetFood:"Fish",dieCount:4,rollCount:1,activationResultMode:"binary"},{birdName:"Willet",targetFood:"Fish",dieCount:4,rollCount:1,activationResultMode:"binary"}];function q(e,t,o,n){if(o>=5)throw new Error("Cannot activate with > 4 dice");const i="rollDiceNotInTheBirdfeeder",r=!1;return n==="binary"?S(i,e,t,o,r):M(i,e,t,o,r)}function X(e){let t=[];for(let o of e){let n={};for(const r of Array.from({length:o.dieCount},(a,s)=>s+1)){const a=q(C,o.targetFood,r,o.activationResultMode);n[r]=a}let i={birdName:o.birdName,targetFood:o.targetFood,dieCount:o.dieCount,rollCount:o.rollCount,activationResultMode:o.activationResultMode,activationStats:n};t.push(i)}return t}const g=e=>e||0,u=e=>e==="X";function w(e){const t=Object.values(e).filter(Boolean).length===2,o=Object.values(e).filter(Boolean).length===0;return{...e,both:t,neither:o}}function K(e){const t=Object.values(e).filter(Boolean).length;return{...e,bonusCardCount:t}}function U(e){const t={Forest:e.Forest,Grassland:e.Grassland,Wetland:e.Wetland},o=Object.values(t).filter(Boolean).length,n=o>1;return{...t,habitatCount:o,multipleHabitats:n}}const Y=["None","White","Brown","Pink","Teal","Yellow"];function _(e){if(e===null)return"None";if(Y.includes(e))return e;throw new Error(`Unexpected "color" property: ${e}`)}function z(e){switch(e){case"originalcore":case"swiftstart":return"BaseGame";case"european":return"European";case"oceania":return"Oceania";case"asia":return"Asia";default:throw new Error(`Unexpected "expansion" property: ${e}`)}}function Z(e){switch(e){case"Wild":return"Star";case"None":case"Cavity":case"Platform":case"Ground":case"Bowl":return e;default:throw new Error(`Unexpected "Nest" property: ${e}`)}}function J(e){if(e==="*")return 0;const t=Number(e);if(Number.isNaN(t)||e==="")throw Error(`Unexpected non-number for Wingspan: ${e===""?"(empty string)":e}`);return t}function R(e){return(e??0)>0}function Q(e){return{id:e.id,commonName:e["Common name"],scientificName:e["Scientific name"],expansion:z(e.Expansion),color:_(e.Color),powerCategory:e.PowerCategory,powerText:e["Power text"],predator:u(e.Predator),flocking:u(e.Flocking),bonusCard:u(e["Bonus card"]),victoryPoints:g(e["Victory points"]),nestType:Z(e["Nest type"]),eggCapacity:g(e["Egg capacity"]),wingspan:J(e.Wingspan),habitats:U({Forest:u(e.Forest),Grassland:u(e.Grassland),Wetland:u(e.Wetland)}),food:{Invertebrate:R(e.Invertebrate),Seed:R(e.Seed),Fish:R(e.Fish),Fruit:R(e.Fruit),Rodent:R(e.Rodent),Nectar:R(e.Nectar),foodCost:{Invertebrate:g(e.Invertebrate),Seed:g(e.Seed),Fish:g(e.Fish),Fruit:g(e.Fruit),Rodent:g(e.Rodent),Nectar:g(e.Nectar),wildFood:g(e["Wild (food)"]),totalFoodCost:g(e["Total food cost"])},foodDetail:{slashFoodCost:u(e["/ (food cost)"]),starFoodCost:u(e["* (food cost)"])}},bonusCards:K({anatomist:u(e.Anatomist),cartographer:u(e.Cartographer),historian:u(e.Historian),photographer:u(e.Photographer),backyardBirder:u(e["Backyard Birder"]),birdBander:u(e["Bird Bander"]),birdCounter:u(e["Bird Counter"]),birdFeeder:u(e["Bird Feeder"]),dietSpecialist:u(e["Diet Specialist"]),enclosureBuilder:u(e["Enclosure Builder"]),falconer:u(e.Falconer),fisheryManager:u(e["Fishery Manager"]),foodWebExpert:u(e["Food Web Expert"]),forester:u(e.Forester),largeBirdSpecialist:u(e["Large Bird Specialist"]),nestBoxBuilder:u(e["Nest Box Builder"]),omnivoreExpert:u(e["Omnivore Expert"]),passerineSpecialist:u(e["Passerine Specialist"]),platformBuilder:u(e["Platform Builder"]),prairieManager:u(e["Prairie Manager"]),rodentologist:u(e.Rodentologist),viticulturalist:u(e.Viticulturalist),wetlandScientist:u(e["Wetland Scientist"]),wildlifeGardener:u(e["Wildlife Gardener"]),caprimulgiformSpecialist:u(e["Caprimulgiform Specialist"]),smallClutchSpecialist:u(e["Small Clutch Specialist"]),endangeredSpeciesProtector:u(e["Endangered Species Protector"])}),beakPointing:w({left:u(e["Beak Pointing Left"]),right:u(e["Beak Pointing Right"])}),note:e.Note,rulings:e.rulings,additionalRulings:e.additionalRulings}}async function ee(){const e=await fetch("/wingstats//data/master.json");if(!e.ok)throw new Error("Failed to load master.json data");const o=(await e.json()).map(Q),s={BaseGame:{expansion:"BaseGame",cards:[]},European:{expansion:"European",cards:[]},Oceania:{expansion:"Oceania",cards:[]},Asia:{expansion:"Asia",cards:[]}};for(const l of o)s[l.expansion].cards.push(l);return s}function te(e,t){for(const o of Object.keys(t)){const i=t[o].cards.filter(r=>r.commonName===e)[0];if(i)return i}throw new Error(`Bird Card with name ${e} not found`)}function D(e){return`${e.replace(/\s+/g,"-")}`}const oe=await ee();function v(e,t,o,n=!0){let i=document.getElementById(t);i||(i=document.createElement("div"),i.className="layout",i.id=t,document.body.appendChild(i));let r=document.getElementById(`${t}-activation-header`);if(!r){r=document.createElement("div"),r.className="activation-header",r.id=`${t}-activation-header`;const c=document.createElement("h1"),d=`${e}-activations`,m=t.split("-").map(p=>p.charAt(0).toUpperCase()+p.slice(1)).join(" ");c.id=d,c.innerHTML=`
  ${m}
  <a class="navlink" href="#${d}" style="text-decoration: none;">⤒</a>
`,r.appendChild(c),i.appendChild(r)}if(n){let c=document.getElementById(`${t}-index`),d;c?(d=c.querySelector("ul.index-list"),d||(d=document.createElement("ul"),d.className="index-list",c.appendChild(d))):(c=document.createElement("div"),c.className="index",c.id=`${t}-index`,d=document.createElement("ul"),d.className="index-list",c.appendChild(d),i.appendChild(c));const m=document.createElement("li");m.className="index-item";const p=document.createElement("a");p.href=`#${o.birdName.replace(/\s+/g,"-")}`,p.textContent=o.birdName,m.appendChild(p),d?.appendChild(m)}const a=document.createElement("div");a.className="result-card",a.id=D(o.birdName);let l=te(o.birdName,oe).powerText.replace(/\[/g,"<i>").replace(/\]/g,"</i>");const f=document.createElement("div");return f.innerHTML=`
    <h1 class="bird-header">${o.birdName}
      <a class="navlink" href="#${t}" style="text-decoration: none;">^</a>
      <a class="navlink" href="#${e}-activations" style="text-decoration: none;">⤒</a>
    </h1>
    <div class="brown-power-wrapper"><h3 class="brown-power-text">${l}</h3></div>
  `,a.appendChild(f),i.appendChild(a),i}function ne(e,t){const o=document.createElement("table");o.className="result-table";const n=document.createElement("thead"),i=document.createElement("tr");if(t.includeConditionColumn){const l=document.createElement("th");l.textContent=t.conditionLabel??"Condition",i.appendChild(l)}const r=document.createElement("th");r.className="succCol",r.textContent="Success",i.appendChild(r);const a=document.createElement("th");a.className="evCol",a.textContent="EV",i.appendChild(a),n.appendChild(i),o.appendChild(n);const s=document.createElement("tbody");for(const[l,f]of Object.entries(e.activationStats)){const c=document.createElement("tr");if(t.includeConditionColumn){const p=document.createElement("td");p.innerHTML=t.getConditionText?t.getConditionText(l):"Set Bespoke Condition Text",c.appendChild(p)}const d=document.createElement("td");d.className="succCol",d.textContent=`${(f.anySuccess*100).toFixed(1)}%`,c.appendChild(d);const m=document.createElement("td");m.className="evCol",m.textContent=f.expectedValue.toFixed(3),c.appendChild(m),s.appendChild(c)}return o.appendChild(s),o}function ie(e){const t=document.createElement("table");t.className="distribution-table";const o=Array.from(new Set(Object.values(e.activationStats).flatMap(s=>Object.keys(s.distribution)))).sort((s,l)=>Number(s)-Number(l)),n=[],i=document.createElement("thead"),r=document.createElement("tr");for(const s of o){const l=document.createElement("th");l.textContent=s;const f=s==="0"?"failCol":"succCol";l.classList.add(f),n.push(f),r.appendChild(l)}i.appendChild(r),t.appendChild(i);const a=document.createElement("tbody");for(const[s,l]of Object.entries(e.activationStats)){const f=document.createElement("tr");o.forEach((c,d)=>{const m=document.createElement("td"),p=l.distribution[c];m.textContent=p&&p!==0?`${(p*100).toFixed(3)}%`:" - ",m.classList.add(n[d]),f.appendChild(m)}),a.appendChild(f)}return t.appendChild(a),t}function F(e,t){const o=document.createElement("section");o.className="bird-results-section";const n=document.createElement("div");if(n.className="table-container",t.includeResultTable){const r=ne(e,t);n.appendChild(r)}if(t.includeDistributionTable){const r=ie(e);n.appendChild(r)}return o.appendChild(n),document.getElementById(D(e.birdName))?.appendChild(o),o}function re(e,t,o){const n=v(e,t,o);return F(o,{includeResultTable:!0,includeDistributionTable:!0,includeConditionColumn:!0,conditionLabel:"Condition",getConditionText:i=>`<strong><i>${i}</i></strong> ${Number(i)===1?"die":"dice"}`}),n}const ae=[{birdName:"Eurasian Kestrel",targetFood:"Rodent",dieCount:3,rollCount:1,activationResultMode:"binary"},{birdName:"Great Cormorant",targetFood:"Fish",dieCount:2,rollCount:1,activationResultMode:"binary"},{birdName:"Rhinoceros Auklet",targetFood:"Fish",dieCount:2,rollCount:1,activationResultMode:"binary"},{birdName:"Sri Lanka Frogmouth",targetFood:"Invertebrate",dieCount:1,rollCount:1,activationResultMode:"binary"}];function se(e,t,o,n){const i="rollAnyXDice";return n==="binary"?S(i,e,t,o,!1):M(i,e,t,o,!1)}function de(e){return e.map(t=>{const o={};return o[0]=se(C,t.targetFood,t.dieCount,t.activationResultMode),{birdName:t.birdName,targetFood:t.targetFood,dieCount:t.dieCount,rollCount:t.rollCount,activationResultMode:t.activationResultMode,activationStats:o}})}function ce(e,t,o){const n=v(e,t,o);return F(o,{includeResultTable:!0,includeDistributionTable:!0,includeConditionColumn:!1}),n}const le=[{birdName:"Stork-Billed Kingfisher",targetFood:"Fish",dieCount:1,rollCount:5,activationResultMode:"binary"}];function ue(e,t,o,n){const i="rollDiceForXBirdsInHabitat";return n==="binary"?S(i,e,t,o,!1):M(i,e,t,o,!1)}function me(e){let t=[];for(let o of e){if(o.dieCount>1)throw new Error("dieCount > 1 currently not implemented (nor required) currently");let n={};for(const r of Array.from({length:o.rollCount},(a,s)=>s+1)){const a=ue(C,o.targetFood,r,o.activationResultMode);n[r]=a}let i={birdName:o.birdName,targetFood:o.targetFood,dieCount:o.dieCount,rollCount:o.rollCount,activationResultMode:o.activationResultMode,activationStats:n};t.push(i)}return t}function fe(e,t,o){const i=v(e,t,o,!1);return F(o,{includeResultTable:!0,includeDistributionTable:!0,includeConditionColumn:!0,conditionLabel:"Condition",getConditionText:r=>`<strong><i>${r}</i></strong> bird${Number(r)===1?"":"s"}`}),i}const b=5,h=1,pe=[{birdName:"Black Noddy",targetFood:"Fish",dieCount:b,rollCount:h,activationResultMode:"binomial"},{birdName:"Black-Shouldered Kite",targetFood:"Rodent",dieCount:b,rollCount:h,activationResultMode:"binary"},{birdName:"Bullfinch",targetFood:["Seed","Fruit"],dieCount:b,rollCount:h,activationResultMode:"binary"},{birdName:"European Bee-Eater",targetFood:"Invertebrate",dieCount:b,rollCount:h,activationResultMode:"binary"},{birdName:"European Honey Buzzard",targetFood:"Invertebrate",dieCount:b,rollCount:h,activationResultMode:"binomial"},{birdName:"Galah",targetFood:"Seed",dieCount:b,rollCount:h,activationResultMode:"binary"},{birdName:"Grey Shrikethrush",targetFood:"Rodent",dieCount:b,rollCount:h,activationResultMode:"binomial"},{birdName:"Hawfinch",targetFood:"Seed",dieCount:b,rollCount:h,activationResultMode:"binary"},{birdName:"Laughing Kookaburra",targetFood:["Fish","Invertebrate","Rodent"],dieCount:b,rollCount:h,activationResultMode:"binary"},{birdName:"Tawny Frogmouth",targetFood:["Invertebrate","Rodent"],dieCount:b,rollCount:h,activationResultMode:"binary"},{birdName:"White-Bellied Sea-Eagle",targetFood:["Fish","Rodent"],dieCount:b,rollCount:h,activationResultMode:"binary"},{birdName:"White-Faced Heron",targetFood:"Fish",dieCount:b,rollCount:h,activationResultMode:"binomial"}];function be(e,t,o){const n="resetTheBirdfeeder";return o==="binary"?S(n,e,t,5,!0):M(n,e,t,5,!0)}function he(e){return e.map(t=>{const o={};return o[0]=be(C,t.targetFood,t.activationResultMode),{birdName:t.birdName,targetFood:t.targetFood,dieCount:t.dieCount,rollCount:t.rollCount,activationResultMode:t.activationResultMode,activationStats:o}})}function ge(e,t,o){const n=v(e,t,o);return F(o,{includeResultTable:!0,includeDistributionTable:!0,includeConditionColumn:!1}),n}const Ce=[{birdName:"Brahminy Kite",targetFood:["Fish","Rodent"],dieCount:3,rollCount:3,activationResultMode:"sequential"},{birdName:"Forest Owlet",targetFood:["Invertebrate","Rodent"],dieCount:2,rollCount:3,activationResultMode:"sequential"},{birdName:"Purple Heron",targetFood:["Invertebrate","Fish"],dieCount:2,rollCount:3,activationResultMode:"sequential"},{birdName:"White-Throated Kingfisher",targetFood:["Invertebrate","Fish","Rodent"],dieCount:1,rollCount:3,activationResultMode:"sequential"}];function ve(e,t,o,n){return P("pushYourLuck",e,t,o,n)}function Fe(e){let t=[];for(let o of e){let n={};for(const r of Array.from({length:o.rollCount},(a,s)=>s+1)){const a=ve(C,o.targetFood,o.dieCount,r);n[r]=a}let i={birdName:o.birdName,targetFood:o.targetFood,dieCount:o.dieCount,rollCount:o.rollCount,activationResultMode:o.activationResultMode,activationStats:n};t.push(i)}return t}function Re(e,t,o){const n=v(e,t,o);return F(o,{includeResultTable:!0,includeDistributionTable:!0,includeConditionColumn:!0,conditionLabel:"Condition",getConditionText:i=>`Stop after <strong><i>${i}</i></strong> roll`}),n}const ye=[{birdName:"Philippine Eagle",targetFood:"Rodent",dieCount:5,rollCount:3,activationResultMode:"withholding"}];function Ne(e,t,o,n){return H("philippineEagle",e,t,o,n)}function Be(e){return e.map(t=>{const o={};return o[0]=Ne(C,t.targetFood,t.dieCount,t.rollCount),{birdName:t.birdName,targetFood:t.targetFood,dieCount:t.dieCount,rollCount:t.rollCount,activationResultMode:t.activationResultMode,activationStats:o}})}function Se(e,t,o){const i=v(e,t,o,!1);return F(o,{includeResultTable:!0,includeDistributionTable:!0,includeConditionColumn:!1}),i}const Me=[{birdName:"Masked Lapwing",targetFood:["Fish","Fruit","Invertebrate","Nectar","Rodent","Seed"],dieCount:5,rollCount:1,activationResultMode:"uniques"}];function Ee(e,t){return j("maskedLapwing",e,t)}function xe(e){let t=[];for(const o of e){const n={};for(const r of Object.values(G))n[r.version]=Ee(r,o.dieCount);const i={birdName:o.birdName,targetFood:o.targetFood,dieCount:o.dieCount,rollCount:o.rollCount,activationResultMode:o.activationResultMode,activationStats:n};t.push(i)}return t}function ke(e,t,o){const i=v(e,t,o,!1);return F(o,{includeResultTable:!0,includeDistributionTable:!0,includeConditionColumn:!0,conditionLabel:"Condition",getConditionText:r=>`<strong><i>${r}</i></strong> Dice`}),i}async function Te(){console.log("1.0.0");function t(n,i,r,a,s){let l=document.getElementById(`${n}-index-list`);const f=document.createElement("li");f.className="index-item";const c=document.createElement("a");c.href=`#${i}`,c.textContent=`${i.replace(/-/g," ")}`,f.appendChild(c),l?.appendChild(f);const d=document.getElementById(`${n}-layout`);console.log(`Rendering ${i}`),d&&r(a).forEach(p=>{const N=s(n,i,p);d.appendChild(N)})}Object.values({"reset-the-birdfeeder":()=>t("dice","reset-the-birdfeeder",he,pe,ge),"roll-dice-not-in-the-birdfeeder":()=>t("dice","roll-dice-not-in-the-birdfeeder",X,V,re),"push-your-luck":()=>t("dice","push-your-luck",Fe,Ce,Re),"roll-any-x-dice":()=>t("dice","roll-any-x-dice",de,ae,ce),"roll-dice-for-x-birds-in-habitat":()=>t("dice","roll-dice-for-x-birds-in-habitat",me,le,fe),"philippine-eagle":()=>t("dice","philippine-eagle",Be,ye,Se),"masked-lapwing":()=>t("dice","masked-lapwing",xe,Me,ke)}).forEach(n=>n())}Te();
